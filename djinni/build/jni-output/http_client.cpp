// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from native-kit.djinni

#include "http_client.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

HttpClient::HttpClient() : ::djinni::JniInterface<::NK::HttpClient, HttpClient>("com/prsolucoes/nativekit/HttpClient$CppProxy") {}

HttpClient::~HttpClient() = default;


CJNIEXPORT void JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::NK::HttpClient>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_prsolucoes_nativekit_HttpClient_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::NK::HttpClient::create();
        return ::djinni::release(::djinni_generated::HttpClient::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doGet(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_get(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doPost(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_post(::djinni::String::toCpp(jniEnv, j_url),
                              ::djinni::String::toCpp(jniEnv, j_data));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doPut(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url, jstring j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_put(::djinni::String::toCpp(jniEnv, j_url),
                             ::djinni::String::toCpp(jniEnv, j_data));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doDelete(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_delete(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doHead(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_head(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_prsolucoes_nativekit_HttpClient_00024CppProxy_native_1doPath(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NK::HttpClient>(nativeRef);
        auto r = ref->do_path(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
